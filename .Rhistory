original_7,
rt_mean,
rt_sd,
rt_n,
study_name,
reported_effect_size = "smd_unbiased",
reference_mean = 300
)
estimate$raw_data
estimate
estimate <- meta_mean(
original_7,
rt_mean,
rt_sd,
rt_n,
study_name,
reported_effect_size = "smd",
reference_mean = 300
)
estimate$raw_data
statpsych::ci.stdmean1(alpha = 0.05, m = 454, sd = 142, n = 24)
statpsych::ci.stdmean1(alpha = 0.05, m = 454, sd = 142, n = 24, h = 300)
(454-300)/142
statpsych::ci.stdmean1
estimate$raw_data
estimate <- meta_mean(
original_7,
rt_mean,
rt_sd,
rt_n,
study_name,
reported_effect_size = "smd_unbiased",
reference_mean = 300
)
estimate$raw_data
statpsych::ci.stdmean1(alpha = 0.05, m = 454, sd = 142, n = 24, h = 300)
statpsych::ci.stdmean1(alpha = 0.05, m = estimate$raw_data[1, "mean"], sd = estimate$raw_data[1, "sd"], n = estimate$raw_data[1, "n"], h = 300)
x <- 1
statpsych::ci.stdmean1(alpha = 0.05, m = estimate$raw_data[x, "mean"], sd = estimate$raw_data[x, "sd"], n = estimate$raw_data[x, "n"], h = 300)
estimate$raw_data
x <- 2
statpsych::ci.stdmean1(alpha = 0.05, m = estimate$raw_data[x, "mean"], sd = estimate$raw_data[x, "sd"], n = estimate$raw_data[x, "n"], h = 300)
x <- 3
statpsych::ci.stdmean1(alpha = 0.05, m = estimate$raw_data[x, "mean"], sd = estimate$raw_data[x, "sd"], n = estimate$raw_data[x, "n"], h = 300)
0.2762732^2
library(esci4)
# Check - pen group from pen/latop in esci in excel, summary two
estimate_mdiff_one(
comparison_mean = 6.88,
comparison_sd = 4.22,
comparison_n = 48,
reference_mean = 6
)
# Check - pen group from pen/latop in esci in excel, summary two
estimate_mdiff_one(
comparison_mean = 6.88,
comparison_sd = 4.22,
comparison_n = 48,
reference_mean = 6
)
library(esci4)
statpsych::ci.stdmean1(alpha = 0.05, m = 6.88, sd = 4.22, n = 48, h = 6)
pen_transcription <- c(
12.1	,
6.5	,
8.1	,
7.6	,
12.2	,
10.8	,
1	,
2.9	,
14.4	,
8.4	,
17.7	,
20.1	,
2.1	,
11.1	,
11.2	,
10.7	,
1.9	,
5.2	,
9.7	,
5.2	,
2.4	,
7.1	,
8.7	,
8	,
11.3	,
8.5	,
9.1	,
4.5	,
9.2	,
13.3	,
18.3	,
2.8	,
5.1	,
12.4
)
# Check via vector
estimate_mdiff_one(
outcome_variable = pen_transcription
)
pen_data <- data.frame(
transcription = pen_transcription,
other = rnorm(34, 100, 15)
)
estimate_mdiff_one(pen_data, transcription)
estimate_mdiff_one(pen_data, c("transcription", "other"))
library(esci4)
usethis::use_testthat()
library(esci4)
ESCI_data <- test_ESCI_data()
ESCI_data$describe
ESCI_data$data_two
ESCI_data$summary_two
ESCI_data$data_paired
ESCI_data$summary_paired
summary_two <- test_ESCI_data()$summary_two
summary_two <- test_ESCI_data()$summary_two
estimate <- estimate_magnitude(
mean = summary_two$pen_m,
sd = summary_two$pen_s,
n = summary_two$pen_n
)
estimate$es_mean$effect_size
use_test()
library(esci4)
summary_two <- test_ESCI_data()$summary_two
estimate <- estimate_magnitude(
mean = summary_two$pen_m,
sd = summary_two$pen_s,
n = summary_two$pen_n
)
class(estimate)
testthat::expect_type(estimate, "esci_estimate")
testthat::expect_s3_class(estimate, "esci_estimate")
summary_two <- test_ESCI_data()$summary_two
estimate <- estimate_magnitude(
mean = summary_two$pen_m,
sd = summary_two$pen_s,
n = summary_two$pen_n
)
testthat::expect_s3_class(estimate, "esci_estimate")
testthat::expect_equal(estimate$es_mean$effect_size, 6.88)
testthat::expect_equal(estimate$es_mean$LL, 5.654639732)
summary_two <- test_ESCI_data()$summary_two
estimate <- estimate_magnitude(
mean = summary_two$pen_m,
sd = summary_two$pen_s,
n = summary_two$pen_n
)
testthat::expect_s3_class(estimate, "esci_estimate")
testthat::expect_equal(estimate$es_mean$effect_size, 6.88)
testthat::expect_equal(estimate$es_mean$LL, 5.654639732)
testthat::expect_equal(estimate$es_mean$UL, 8.105360268)
describe <- test_ESCI_data()$describe
describe <- test_ESCI_data()$describe
estimate <- estimate_magnitude(describe, laptop_transcription)
describe <- test_ESCI_data()$describe
estimate <- estimate_magnitude(describe, laptop_transcription)
describe <- test_ESCI_data()$describe
estimates <- list()
estimates$from_data_frame <- estimate_magnitude(
describe,
laptop_transcription
)
estimate$from_vector <- estimate_magnitude(
outcome_variable = describe$laptop_transcription
)
describe <- test_ESCI_data()$describe
estimates <- list()
estimates$from_data_frame <- estimate_magnitude(
describe,
laptop_transcription
)
estimate$from_vector <- estimate_magnitude(
outcome_variable = describe$laptop_transcription
)
describe <- test_ESCI_data()$describe
estimates <- list()
estimates$from_data_frame <- estimate_magnitude(
describe,
laptop_transcription
)
myvec <- describe$laptop_transcription
estimate$from_vector <- estimate_magnitude(
outcome_variable = myvector,
outcome_variable_name = "transcription %"
)
# Check - pen group from pen/latop in esci in excel, summary two
estimate_magnitude(mean = 6.88, sd = 4.22, n = 48)
# Check - pen group with 99% CI
estimate_magnitude(
mean = 6.88,
sd = 4.22,
n = 48,
outcome_variable_name = "Transcription %",
conf_level = 0.99
)
pen_transcription <- c(
12.1	,
6.5	,
8.1	,
7.6	,
12.2	,
10.8	,
1	,
2.9	,
14.4	,
8.4	,
17.7	,
20.1	,
2.1	,
11.1	,
11.2	,
10.7	,
1.9	,
5.2	,
9.7	,
5.2	,
2.4	,
7.1	,
8.7	,
8	,
11.3	,
8.5	,
9.1	,
4.5	,
9.2	,
13.3	,
18.3	,
2.8	,
5.1	,
12.4
)
# Check - vector
estimate_magnitude(
outcome_variable = pen_transcription,
conf_level = 0.99
)
pen_study <- data.frame(
"transcription" = pen_transcription,
"other" = rnorm(n = 34, mean = 100, sd = 15)
)
# Check data.frame
estimate_magnitude(pen_study, transcription)
# Check jamovi
estimate_magnitude(pen_study, c("transcription", "other"))
describe <- test_ESCI_data()$describe
estimates <- list()
estimates$from_data_frame <- estimate_magnitude(
describe,
laptop_transcription
)
myvec <- describe$laptop_transcription
estimate$from_vector <- estimate_magnitude(
outcome_variable = myvec,
outcome_variable_name = "transcription %"
)
describe <- test_ESCI_data()$describe
estimates <- list()
estimates$from_data_frame <- estimate_magnitude(
describe,
laptop_transcription
)
myvec <- describe$laptop_transcription
estimates$from_vector <- estimate_magnitude(
outcome_variable = myvec,
outcome_variable_name = "transcription %"
)
for (estimate in estimates) {
testthat::expect_s3_class(estimate, "esci_estimate")
testthat::expect_equal(estimate$overview$mean, 14.51935484)
testthat::expect_equal(estimate$overview$sd, 7.285575674)
testthat::expect_equal(estimate$overview$median, 12.8)
testthat::expect_equal(estimate$overview$q1, 9.45)
testthat::expect_equal(estimate$overview$q3, 17.85)
}
library(esci4)
data_two <- test_ESCI_data()$data_two
pen <- data_two[data_two$condition == "Pen", ]
estimates <- list()
estimates$from_data_frame <- estimate_magnitude(
pen,
transcription
)
myvec <- pen_transcription
estimates$from_vector <- estimate_magnitude(
outcome_variable = myvec,
outcome_variable_name = "transcription %"
)
data_two <- test_ESCI_data()$data_two
pen <- data_two[data_two$condition == "Pen", ]
estimates <- list()
estimates$from_data_frame <- estimate_magnitude(
pen,
transcription
)
myvec <- pen_transcription
myvec <- pen$transcription
estimates$from_vector <- estimate_magnitude(
outcome_variable = myvec,
outcome_variable_name = "transcription %"
)
for (estimate in estimates) {
testthat::expect_s3_class(estimate, "esci_estimate")
testthat::expect_equal(estimate$overview$mean, 14.51935484)
testthat::expect_equal(estimate$overview$sd, 7.285575674)
testthat::expect_equal(estimate$overview$median, 12.8)
testthat::expect_equal(estimate$overview$q1, 9.45)
testthat::expect_equal(estimate$overview$q3, 17.85)
}
data_two <- test_ESCI_data()$data_two
pen <- data_two[data_two$condition == "Pen", ]
estimates <- list()
estimates$from_data_frame <- estimate_magnitude(
pen,
transcription
)
myvec <- pen$transcription
estimates$from_vector <- estimate_magnitude(
outcome_variable = myvec,
outcome_variable_name = "transcription %"
)
for (estimate in estimates) {
testthat::expect_s3_class(estimate, "esci_estimate")
testthat::expect_equal(estimate$es_mean$effect_size, 8.811764706)
testthat::expect_equal(estimate$es_mean$LL, 7.154641985)
testthat::expect_equal(estimate$es_mean$UL, 10.46888743)
testthat::expect_equal(estimate$es_mean$df, 63)
}
for (estimate in estimates) {
testthat::expect_s3_class(estimate, "esci_estimate")
testthat::expect_equal(estimate$es_mean$effect_size, 8.811764706)
testthat::expect_equal(estimate$es_mean$LL, 7.154641985)
testthat::expect_equal(estimate$es_mean$UL, 10.46888743)
testthat::expect_equal(estimate$es_mean$df, 33)
}
data_two <- test_ESCI_data()$data_two
pen <- data_two[data_two$condition == "Pen", ]
estimates$from_data_frame_NA <- estimate_magnitude(
rbind(pen, data.frame(transcription = c(NA, NA, NA))),
transcription
)
data_two <- test_ESCI_data()$data_two
pen <- data_two[data_two$condition == "Pen", ]
pen$condition <- NULL
estimates <- list()
estimates$from_data_frame <- estimate_magnitude(
pen,
transcription
)
data_two <- test_ESCI_data()$data_two
pen <- data_two[data_two$condition == "Pen", ]
pen$condition <- NULL
estimates <- list()
estimates$from_data_frame <- estimate_magnitude(
pen,
transcription
)
myvec <- pen$transcription
estimates$from_vector <- estimate_magnitude(
outcome_variable = myvec,
outcome_variable_name = "transcription %"
)
estimates$from_data_frame_NA <- estimate_magnitude(
rbind(pen, data.frame(transcription = c(NA, NA, NA))),
transcription
)
for (estimate in estimates) {
testthat::expect_s3_class(estimate, "esci_estimate")
testthat::expect_equal(estimate$es_mean$effect_size, 8.811764706)
testthat::expect_equal(estimate$es_mean$LL, 7.154641985)
testthat::expect_equal(estimate$es_mean$UL, 10.46888743)
testthat::expect_equal(estimate$es_mean$df, 33)
}
# From vector
myvec <- pen$transcription
estimates$from_vector_NA <- estimate_magnitude(
outcome_variable = c(myvec, NA, NA),
outcome_variable_name = "transcription %"
)
for (estimate in estimates) {
testthat::expect_s3_class(estimate, "esci_estimate")
testthat::expect_equal(estimate$es_mean$effect_size, 8.811764706)
testthat::expect_equal(estimate$es_mean$LL, 7.154641985)
testthat::expect_equal(estimate$es_mean$UL, 10.46888743)
testthat::expect_equal(estimate$es_mean$df, 33)
}
estimate_magnitude(
pen, transcription1
)
data_two <- test_ESCI_data()$data_two
pen <- data_two[data_two$condition == "Pen", ]
pen$condition <- NULL
errors <- list()
errors$cname <- testthat::expect_error(
estimate_magnitude(
pen, transcription1
)
)
errors$cname
class(errors$cname)
testthat::expect_s3_class(errors$cname, "error_invalid_column_name")
terror <- testthat::expect_error(
estimate_magnitude(
pen, transcription, conf_level = 0
)
)
class(terror)
# Data and summary
terror <- testthat::expect_error(
estimate_magnitude(
pen, transcription1, mean = 10
)
)
class(terror)
estimate_magnitude(
pen, transcription1, mean = 10
)
# Data passed, don't include summary
terror <- testthat::expect_error(
estimate_magnitude(
pen, transcription1, mean = 10
)
)
terror <- testthat::expect_error(
estimate_magnitude(
pen, transcription1, sd = 1
)
)
terror <- testthat::expect_error(
estimate_magnitude(
pen, transcription1, n = 1
)
)
# Summary data - bad sd or n
# CI out of range
summary_two <- test_ESCI_data()$summary_two
terror <- testthat::expect_error(
estimate <- estimate_magnitude(
mean = summary_two$pen_m,
sd = -1,
n = summary_two$pen_n
)
)
testthat::expect_s3_class(errors$cname, "error_out_of_range")
class(terror)
# Summary data - bad sd or n
# CI out of range
summary_two <- test_ESCI_data()$summary_two
terror <- testthat::expect_error(
estimate <- estimate_magnitude(
mean = summary_two$pen_m,
sd = -1,
n = summary_two$pen_n
)
)
testthat::expect_s3_class(errors$cname, "error_out_of_range")
data_two <- test_ESCI_data()$summary_two
summary_two <- test_ESCI_data()$summary_two
View(summary_two)
data_paired <- test_ESCI_data()$data_paired
data_paired
estimate <- estimate_magnitude(
data = data_paired,
outcome_variable = c("pretest", "posttest")
)
estimate
estimate$es_mean$effect_size
testthat::expect_s3_class(estimate, "esci_estimate")
testthat::expect_equal(estimate$es_mean$effect_size, c(11.58333333, 13.25))
data_paired <- test_ESCI_data()$data_paired
estimate <- estimate_magnitude(
data = data_paired,
outcome_variable = c("pretest", "posttest")
)
testthat::expect_s3_class(estimate, "esci_estimate")
testthat::expect_equal(estimate$es_mean$effect_size, c(11.58333333, 13.25))
testthat::expect_equal(estimate$es_mean$LL, c(9.476776251, 11.41001901))
testthat::expect_equal(estimate$es_mean$UL, c(13.68989042, 15.08998099))
testthat::expect_equal(estimate$overview$sd, c(3.315482505, 2.895921897))
testthat::expect_equal(estimate$es_mean$df, c(11, 11))
install.packages('jmvtools', repos=c('https://repo.jamovi.org', 'https://cran.r-project.org'))
usethis::edit_r_profile()
options(jamovi_home = "c:\\Program Files\\jamovi 2.2.3.0")
install.packages("jmvcore")
jmvtools::check()
jmvtools::install()
jmvtools::addAnalysis(name='jamovi-describe', title='Describe')
jmvtools::addAnalysis(name='jamovi_describe', title='Describe')
jmvtools::addAnalysis(name='jamovidescribe', title='Describe')
jmvtools::install()
jmvtools::install()
remove.packages("statpsych", lib="~/R/win-library/4.0")
install.packages("statpsych")
install.packages("statpsych")
jmvtools::install()
library(esci4)
install.packages("cli")
install.packages("cli")
install.packages("rlang")
install.packages("rlang")
jmvtools::install()
jmvtools::install()
jmvtools::install
jmcPath()
jmvtools::version()
? jmvtools
install.packages("ggbeeswarm")
jmvtools::prepare()
jmvtools::prepare
